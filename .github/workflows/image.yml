# This is a basic workflow to help you get started with Actions

name: Image build and push

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  schedule:
    - cron: "0 06 * * 1"
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.4
        with:
         fetch-depth: 0
      
      - uses: actions/setup-go@v2
        with:
          go-version: 1.14


      - name: install packages and set gopath
        run: >
          sudo apt install -y gcc-arm-linux-gnueabihf &&
          echo "GOBIN=$GOPATH/bin" >> $GITHUB_ENV

      - name: image build
        run: |
          go get "github.com/prometheus/client_golang/prometheus"
          go get "github.com/prometheus/client_golang/prometheus/promhttp"
          chmod +x go-executable-build.bash
          ./go-executable-build.bash custom-error-pages
          ls
          #go build -a -installsuffix cgo -ldflags "-s -w" -o rootfs/custom-error-pages
        
      - name: Build an canary image from Dockerfile #for trivy checks before doing a crossbuild.
        run: |
          docker build --build-arg TARGETOS=linux --build-arg TARGETARCH=amd64 -t docker.io/anyfavors/nginx-ingress-default-backend:${{ github.sha }} .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/anyfavors/nginx-ingress-default-backend:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'   

      - name: semantic version
        id: semantic_version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          # The prefix to use to identify tags
         tag_prefix: "v"
         # A string which, if present in a git commit, indicates that a change represents a
         # major (breaking) change, supports regular expressions wrapped with '/'
         major_pattern: "(MAJOR)"
         # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
         minor_pattern: "(MINOR)"
         # A string to determine the format of the version output
         format: "v${major}.${minor}.${patch}"
         # Optional path to check for changes. If any changes are detected in the path the
         # 'changed' output will true. Enter multiple paths separated by spaces.
         #change_path: "src/my-service"
         # Named version, will be used as suffix for name version tag
         #namespace: alpssh
         # Indicate whether short tags like 'v1' should be supported. If false only full
         # tags like 'v1.0.0' will be recognized.
         short_tags: true
         # If this is set to true, *every* commit will be treated as a new version.
         bump_each_commit: true

      - name: do release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.semantic_version.outputs.version }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3.5.0
        with:
          images: ghcr.io/anyfavors/nginx-ingress-default-backend # list of Docker images to use as base name for tags
          tags: |
            type=semver,enable=true,priority=900,pattern={{version}},value=${{ steps.semantic_version.outputs.version }}
            
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
       
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
        
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
    
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
                     
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
 
        
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7, linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
